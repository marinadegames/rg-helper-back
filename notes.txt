// example (old code): todo: need delete in future

// import chalk from "chalk";
// import os from "os";
// import dotenv from "dotenv";
// import express from 'express'
// import cors from 'cors'
// import users from "./usersRouter.js";
// import bodyParser from 'body-parser'
// import mongoose from "mongoose";
//
// // params
// dotenv.config()
// const port = 8888
// const app = express()
// app.use(bodyParser.urlencoded({extended: false}))
// app.use(bodyParser.json())
// app.use(cors())
//
// // connect ro database
// async function main() {
//     await mongoose.connect('mongodb://localhost:27017/patients');
// }
//
// main().catch(err => console.log(err))
//
//
// // routers
// app.use('/users', users)
// app.get('/', async (req, res) => {
//     res.send(`<h1>HOME PAGE</h1>`)
// })
// app.get('/tasks', async (req, res) => {
//     res.send('TASKS')
// })
//
// // default
// app.use(async (req, res) => {
//     res.send('404 NOT FOUND')
// })
//
// console.clear()
// console.log(chalk.greenBright('===== SERVER STARTED ====='))
// console.log(chalk.blueBright('PROCESS №:', chalk.cyanBright(process.pid)))
// console.log(chalk.blueBright('PORT:'), chalk.cyanBright(port))
// console.log(chalk.blueBright('OS:'), chalk.cyanBright(os.platform()))
// console.log(chalk.blueBright("CPU's"), chalk.cyanBright(os.cpus().length))
//
// app.listen(port, () => {
//     console.log(chalk.greenBright(`===== SERVER IS RUNNING... =====`))
// })
//
//



// let __filename = import.meta.url
// let __dirname = path.dirname(__filename);

// res.writeHead(200, {
//     'Content-Type':'text/html; charset=utf-8'
// })
//
// res.end(`<h1>HELLO, FRIEND!</h1>`)

// if (cluster.isMaster) {
//     for (let i = 0; i < os.cpus.length - 2; i++) {
//         cluster.fork()
//     }
// } else {
//     console.log(chalk.blue(`Worker with pid=${process.pid} started!`))
//     setInterval(() => {
//         console.log(chalk.blue(`Worker with pid=${process.pid} working...`))
//     }, 2000)
// }

// const writeFileAsync = async (path) => {
//     return new Promise((resolve, reject) => fs.writeFile(path.resolve('test.txt'), (err) => {
//         if (err) {
//             console.log(chalk.red(err.message))
//             reject(err.message)
//         }
//         console.log(chalk.blueBright('FILE CREATED.'))
//         resolve()
//     }))
// }
//
// const appendFileAsync = async (path, data) => {
//     return new Promise((resolve, reject) => fs.appendFile(path, data, (err) => {
//         if (err) {
//             console.log(chalk.red(err.message))
//             reject(err.message)
//         }
//         console.log(chalk.blueBright('FILE UPDATED.'))
//         resolve()
//     }))
// }
//
// writeFileAsync(path.resolve('test.txt'), 'data')
//     .then(() => appendFileAsync(path.resolve('test.txt'), '123'))
//     .then(() => appendFileAsync(path.resolve('test.txt'), '456'))
//     .then(() => appendFileAsync(path.resolve('test.txt'), '789'))
//     .then(() => appendFileAsync(path.resolve('test.txt'), '000'))
//     .catch(err => console.log(chalk.red('ERROR: ', err)))


// fs.appendFile(path.resolve('test.txt'),'444', (err) => {
//     if (err) {
//         console.error(chalk.red(err))
//         return;
//     }
//     console.log(chalk.blueBright('ФАЙЛ ОБНОВЛЕН!'))
// })

// fs.writeFile(path.resolve('test.txt'), '212', (err) => {
//     if (err) {
//         console.error(chalk.red(err))
//         return ;
//     }
//     console.log(chalk.blueBright('ФАЙЛ СОЗДАН!'))
// } )

// fs.rmdir(path.resolve('dir34'), (err) => {
//     if (err) {
//         console.error(chalk.red(err))
//         return ;
//     }
//     console.log(chalk.blueBright('ПАПКА УДАЛЕНА!'))
// })

// fs.mkdir(path.resolve('dir34'), (err) => {
//     if (err) {
//         console.error(err)
//         return ;
//     }
//     console.log(chalk.blueBright('ПАПКА СОЗДАНА!!!'))
// })


// console.log(chalk.greenBright('===== SERVER STARTED ====='))
// console.log(chalk.blueBright('PROCESS №:', process.pid))
// console.log(chalk.blueBright('PORT:', process.env.PORT))
// console.log(chalk.blueBright('MODE:', process.env.NODE_ENV))
// console.log(chalk.cyanBright('АБСОЛЮТНЫЙ ПУТЬ:', path.resolve('index.js')))
// const fullPath = path.resolve('index.js')
//
// // console.log(chalk.cyanBright('ПАРСИНГ ПУТИ:', ))
// // console.log(path.parse(fullPath))
//
// const siteURL = 'http://localhost:8080/users?id=5123'
// const url = new URL(siteURL)
// console.log(url)